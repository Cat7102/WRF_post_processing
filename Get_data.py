# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'get_data.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import numpy as np
import openpyxl
import netCDF4 as nc
import pandas as pd
from datetime import datetime,timedelta
from wrf import getvar,to_np,ALL_TIMES
import sys


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(644, 274)
        self.gridLayout = QtWidgets.QGridLayout(Dialog)
        self.gridLayout.setObjectName("gridLayout")
        self.comboBox = QtWidgets.QComboBox(Dialog)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.gridLayout.addWidget(self.comboBox, 1, 1, 1, 1)
        self.comboBox_2 = QtWidgets.QComboBox(Dialog)
        self.comboBox_2.setMinimumSize(QtCore.QSize(150, 0))
        self.comboBox_2.setObjectName("comboBox_2")
        self.gridLayout.addWidget(self.comboBox_2, 1, 3, 1, 1)
        self.comboBox_3 = QtWidgets.QComboBox(Dialog)
        self.comboBox_3.setMinimumSize(QtCore.QSize(150, 0))
        self.comboBox_3.setObjectName("comboBox_3")
        self.gridLayout.addWidget(self.comboBox_3, 1, 5, 1, 1)
        self.label_3 = QtWidgets.QLabel(Dialog)
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 1, 2, 1, 1)
        self.pushButton = QtWidgets.QPushButton(Dialog)
        self.pushButton.setObjectName("pushButton")
        self.gridLayout.addWidget(self.pushButton, 0, 2, 1, 1)
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 0, 1, 1)
        self.label_2 = QtWidgets.QLabel(Dialog)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 1, 0, 1, 1)
        self.label_4 = QtWidgets.QLabel(Dialog)
        self.label_4.setObjectName("label_4")
        self.gridLayout.addWidget(self.label_4, 1, 4, 1, 1)
        self.pushButton_2 = QtWidgets.QPushButton(Dialog)
        self.pushButton_2.setObjectName("pushButton_2")
        self.gridLayout.addWidget(self.pushButton_2, 2, 2, 1, 1)
        self.textEdit = QtWidgets.QTextEdit(Dialog)
        self.textEdit.setMaximumSize(QtCore.QSize(16777215, 30))
        self.textEdit.setObjectName("textEdit")
        self.gridLayout.addWidget(self.textEdit, 0, 1, 1, 1)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.comboBox.setItemText(0, _translate("Dialog", "经纬度"))
        self.comboBox.setItemText(1, _translate("Dialog", "离地高度(m)"))
        self.label_3.setText(_translate("Dialog", "高度："))
        self.pushButton.setText(_translate("Dialog", "选择"))
        self.label.setText(_translate("Dialog", "文件路径："))
        self.label_2.setText(_translate("Dialog", "提取参数类型："))
        self.label_4.setText(_translate("Dialog", "时间："))
        self.pushButton_2.setText(_translate("Dialog", "提取"))

        '''以下为自己编辑部分'''
        self.pushButton.clicked.connect(self.choosencfile)
        self.pushButton_2.clicked.connect(self.judge_data)

    # 选文件的函数
    def choosencfile(self):
        self.path, self.filetype = QtWidgets.QFileDialog.getOpenFileName(directory="C:/", filter="NC file (*.nc);;")
        self.textEdit.setText(self.path)
        timelist = self.get_ncfile_time(self.path)
        self.comboBox_3.addItems(timelist)
        heightlist = self.get_ncfile_height(self.path)
        self.comboBox_2.addItems(heightlist)

    # 填充combobox的时间
    def get_ncfile_time(self, path):
        timelist = []
        self.ncfile = nc.Dataset(path)
        time = getvar(self.ncfile, 'times')
        time = to_np(time)
        time = str(time)
        time = time[0:-10]
        times = getvar(self.ncfile, 'xtimes', timeidx=ALL_TIMES)
        formal_datetime = datetime.strptime(time, '%Y-%m-%dT%H:%M:%S')
        for i in times:
            timelist.append(str(formal_datetime + timedelta(minutes=int(i))))
        timelist.append('ALL')
        self.time_num = len(timelist)
        return timelist

    # 填充combobox的高度
    def get_ncfile_height(self, path):
        self.ncfile = nc.Dataset(path)
        # 计算离地高度(大致)
        height = getvar(self.ncfile, 'height')
        height_maskedarray = to_np(height)
        height_maskedarray_1 = height_maskedarray[:, 0, 0]
        height_maskedarray_2 = height_maskedarray[:, -1, -1]
        hgt_maskedarray = self.ncfile.variables['HGT']
        hgt_maskedarray_1 = hgt_maskedarray[0, 0, 0]
        hgt_maskedarray_2 = hgt_maskedarray[0, -1, -1]
        height_to_earth_float = (height_maskedarray_1 - hgt_maskedarray_1 + height_maskedarray_2 - hgt_maskedarray_2) / 2
        height_to_earth = []
        for i in height_to_earth_float:
            height_to_earth.append(int(i))
        height_num_list = list(range(height_maskedarray.shape[0]))
        heightlist = []
        for i in range(len(height_num_list)):
            heightlist.append(str(height_num_list[i] + 1) + '-' + str(height_to_earth[i]) + 'm')
        self.height_num = len(heightlist)
        return heightlist

    #用于提取文件的分支
    def judge_data(self):
        if self.comboBox.currentIndex()==0:
            self.get_lat_lon()
        if self.comboBox.currentIndex()==1:
            self.get_height_to_earth()

    #提取经纬度
    def get_lat_lon(self):
        file_path, file_type = QtWidgets.QFileDialog.getSaveFileName(None, "保存图片", "C:/", "xlsx文件(*.xlsx)")
        # 读取数据
        lat = self.ncfile.variables['XLAT'][0]
        lat = lat.tolist()  # 因为是masked array，所以需要转换为list才能进行
        lon = self.ncfile.variables['XLONG'][0]
        lon = lon.tolist()  # 因为是masked array，所以需要转换为list才能进行
        # 创建xlsx
        workbook = openpyxl.Workbook()
        worksheet = workbook.create_sheet()
        worksheet.title = 'longitude_latitude'
        for i in range(len(lat)):  # 这里zip的功能只能进行一层的组合，对于二层的列表没法组合，因此需要嵌套运行
            a = lat[i]
            b = lon[i]
            lat_lon = zip(b, a)
            num = 1
            for j in list(lat_lon):
                worksheet.cell(i + 1, num, str(j))
                num += 1
        workbook.save(filename=file_path)

    def get_height_to_earth(self):
        file_path, file_type = QtWidgets.QFileDialog.getSaveFileName(None, "保存图片", "C:/", "xlsx文件(*.xlsx)")
        # 计算离地高度(大致)
        height = getvar(self.ncfile, 'height')
        height_maskedarray = to_np(height)
        height_maskedarray_x = height_maskedarray[self.comboBox_2.currentIndex(), :, :]
        hgt_maskedarray = self.ncfile.variables['HGT']
        hgt_maskedarray_x = hgt_maskedarray[self.comboBox_3.currentIndex(), :, :]
        height_to_earth = height_maskedarray_x-hgt_maskedarray_x
        print(height_to_earth.shape)
        # 创建xlsx
        workbook = openpyxl.Workbook()
        worksheet = workbook.create_sheet()
        worksheet.title = '离地高度'
        for i in range(height_to_earth.shape[0]):  # 这里zip的功能只能进行一层的组合，对于二层的列表没法组合，因此需要嵌套运行
            for j in range(height_to_earth.shape[1]):
                worksheet.cell(i + 1, j+1, height_to_earth[i,j])
        workbook.save(filename=file_path)


if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())